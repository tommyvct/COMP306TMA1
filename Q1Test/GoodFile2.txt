DESCRIPTION
       zypper is a command-line interface to ZYpp system management library (libzypp). It can be used to install, update,
       remove software, manage repositories, perform various queries, and more.

CONCEPTS
       Most of the following concepts are common for all applications based on the libzypp package management library,
       but there are some zypper specifics.

   System Packages
       The set of installed packages on a system is sometimes denoted as repository @System or System Packages. In
       contrast to available repositories providing packages which can be installed, @System provides packages which can
       only be deleted. Installed packages which are not also provided by at least one of the available repositories are
       often denoted as being unwanted, orphaned or dropped.

   Repositories
       Libzypp works with repository metadata, this is information about packages and their relations extracted from RPM
       packages and other data like patch information, pattern definitions, etc. These data are stored together with the
       RPM files in folders called repositories. Repositories can be placed on various media like an HTTP or FTP server,
       DVD, or a folder on a local disc.

       There is a special set of commands in zypper intended to manipulate repositories. Also many commands and options
       take a repository as an argument. See section COMMANDS, subsection Repository Management for more details.

   GPG checks
       Disabling GPG checks is not recommended. Signing data enables the recipient to verify that no modifications
       occurred after the data were signed. Accepting data with no, wrong or unknown signature can lead to a corrupted
       system and in extreme cases even to a system compromise.

       DESCRIPTION
       zypper is a command-line interface to ZYpp system management library (libzypp). It can be used to install, update,
       remove software, manage repositories, perform various queries, and more.

CONCEPTS
       Most of the following concepts are common for all applications based on the libzypp package management library,
       but there are some zypper specifics.

   System Packages
       The set of installed packages on a system is sometimes denoted as repository @System or System Packages. In
       contrast to available repositories providing packages which can be installed, @System provides packages which can
       only be deleted. Installed packages which are not also provided by at least one of the available repositories are
       often denoted as being unwanted, orphaned or dropped.

   Repositories
       Libzypp works with repository metadata, this is information about packages and their relations extracted from RPM
       packages and other data like patch information, pattern definitions, etc. These data are stored together with the
       RPM files in folders called repositories. Repositories can be placed on various media like an HTTP or FTP server,
       DVD, or a folder on a local disc.

       There is a special set of commands in zypper intended to manipulate repositories. Also many commands and options
       take a repository as an argument. See section COMMANDS, subsection Repository Management for more details.

   GPG checks
       Disabling GPG checks is not recommended. Signing data enables the recipient to verify that no modifications
       occurred after the data were signed. Accepting data with no, wrong or unknown signature can lead to a corrupted
       system and in extreme cases even to a system compromise.

              Zypp verifies the authenticity of repository metadata by checking their GPG signature. If the repository metadata are signed with a trusted
       key and successfully verified, packages from this repository are accepted for installation if they match the checksum provided in the
       metadata. Using unsigned repositories needs to be confirmed.

       If the repository metadata are not signed, the GPG signature of each downloaded rpm package is checked before accepting it for installation.
       Packages from unsigned repositories need a valid GPG signature. Using unsigned packages needs to be confirmed.

       The above is the default behavior defined by settings in /etc/zypp/zypp.conf.

       The addrepo and modifyrepo commands provide further options to tune the behavior per repository. It is for example possible to relax the need
       to confirm installing unsigned packages for a specific repository. But if you do so, you should be very certain that an attacker can hardly
       modify the package data within the repository or on the way to your machine. See section COMMANDS for details about the command options.

   Resource Identifiers (URI)
       To specify locations of repositories or other resources (RPM files, .repo files) you can use any type of URI supported by libzypp. In
       addition Zypper accepts a special URI identifying openSUSE Build Service (OBS) repositories in the addrepo command. These URIs have the form
       of obs://’project'/[platform].

       See section COMMANDS, subsection Repository Management for a complete list and examples of supported URI formats.

   Refresh
       Refreshing a repository means downloading metadata of packages from the medium (if needed), storing it in local cache (typically under
       /var/cache/zypp/raw/’alias' directory) and preparsing the metadata into .solv files (building the solv cache), typically under
       /var/cache/zypp/solv/’alias'.

       The metadata get refreshed either automatically or on user request. An automatic refresh takes place right before reading metadata from the
       database if the auto-refresh is enabled for the repository and the metadata is reported to be out of date. If the auto-refresh is disabled,
       the repository will only be refreshed on user request. You can request a refresh by calling zypper refresh (see the documentation of the
       refresh command for details).

       The repository metadata are checked for changes before actually doing the refresh. A change is detected by downloading one or two metadata
       index files (small files) and comparing the checksums of the cached ones and the remote ones. If the files differ, the repository is out of
       date and will be refreshed.

       To delay the up-to-date check (and thus the automatic refresh) for a certain number of minutes, edit the value of the repo.refresh.delay
       attribute of ZYpp config file (/etc/zypp/zypp.conf). This means, zypper will not even try to download and check the index files, and you will
       be able to use zypper for operations like search or info without internet access or root privileges.

   Services
       Services are one level above repositories and serve to manage repositories or to do some special tasks. Libzypp currently supports Repository
       Index Service (RIS) and Plugin Service.

       Repository Index Service (RIS) is a special type of repository which contains a list of other repositories. This list can be generated
       dynamically by the server according to some URI parameters or user name, or can be static. Once such service is added to your system, zypper
       takes care of adding, modifying, or removing these repositories on your system to reflect the current list. See section Service Management
       and <https://en.opensuse.org/openSUSE:Standards_Repository_Index_Service> for more details.

   Package Types
       Zypper  works with several types of resource objects, called resolvables. A resolvable might be a package, patch, pattern, product; basically
       any kind of object with dependencies to other objects.

       package
           An ordinary RPM package.

       patch
           A released patch conflicts with the affected/vulnerable versions of a collection of packages. As long as any of these affected/vulnerable
           versions  are  installed,  the conflict triggers and the patch is classified as needed, optional or as unwanted if the patch is locked. +
           Selecting the patch, the conflict is resolved by updating all installed and affected/vulnerable packages to a version providing the  fix.
           When  updating the packages zypper always aims for the latest available version. Resolved patches are classified as either applied or not
           needed, depending on whether they refer to actually installed packages. + Depending on the kind of  defect,  patches  are  classified  by
           category  and  severity.  Commonly used values for category are security, recommended, optional, feature, document or yast. Commonly used
           values for severity are critical, important, moderate, low or unspecified. + Note that the patch command does not apply optional  patches
           (category  optional  or  feature)  by  default.  If  you  actually  want  to  consider  all  optional  patches as being needed, say patch
           --with-optional. Specific patches can be applied using the install command (e.g. zypper install patch:openSUSE-2014-7).

       pattern
           A group of packages required or recommended to install some functionality.

       product
           A group of packages which are necessary to install a product.

       srcpackage
           Source code package (.src.rpm). This type works in search and install commands.

       application
           Legacy: Since libzypp-17.7.0 this type is no longer available.

       Throughout this manual we will often refer to resolvables simply as packages and to resolvable types as package  type  or  kind.  These  type
       names  can  be  used  as  arguments of --type option in several commands like install, info, or search. Commands should also allow to specify
       resolvables as KIND:’NAME' (e.g. patch:openSUSE-2014-7).

   Package Dependencies
       Software packages depend on each other in various ways. Packages usually require or recommend other packages, but they can also conflict with
       other  packages. Packages may support specific hardware or language settings. Zypper uses a dependency solver to find out which packages need
       to be installed to satisfy the user’s request. See <https://en.opensuse.org/Libzypp/Dependencies> for more information.

   Automatically installed packages
       Packages added by the dependency solver in order to resolve a user’s request are remembered as having been  'automatically  installed'.  They
       may later be removed, if no more user installed packages depend on them (e.g. by zypper remove --clean-deps).

       In the S+tatus+ column the search command distinguishes between user installed packages (i+) and automatically installed packages (i).

   Package File Conflicts
       File  conflicts  happen  when  two  packages  attempt  to install files with the same name but different contents. This may happen if you are
       installing a newer version of a package without erasing the older version, of if two unrelated packages each install a  file  with  the  same
       name.

       As checking for file conflicts requires access to the full filelist of each package being installed, zypper will check for file conflict only
       if all packages are downloaded in advance (see --download-in-advance).

       As the reason for file conflicts usually is a poor package design or lack of coordination between the people building the packages, they  are
       not  easy  to resolve. By using the --replacefiles option you can force zypper to replace the conflicting files. Nevertheless this may damage
       the package whose file gets replaced.

COMMANDS
       zypper provides a number of commands. Each command accepts the options listed in the GLOBAL OPTIONS section. These options must be  specified
       before  the  command name. In addition, many commands have specific options, which are listed in this section. These command-specific options
       must be specified after the name of the command and before any of the command arguments.

       Zypper also provides limited support for writing extensions/subcommands in any language. See section SUBCOMMANDS for details.
